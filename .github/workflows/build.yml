# This is a basic workflow that is manually triggered

name: Build

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
    workflow_dispatch:
        # Inputs the workflow accepts.
        inputs:
            name:
                # Friendly description to be shown in the UI instead of 'name'
                description: 'Social network to greet'
                # Default value if no value is explicitly provided
                default: 'Build'
                # Input has to be provided for the workflow to run
                required: true
                # The data type of the input
                type: string
jobs:
    start_stage:
        runs-on: ubuntu-latest
        steps:
            - name: Slit ref to array.
              id: split
              uses: jungwinter/split@v2
              with:
                  msg: ${{ github.ref_name }}
                  separator: '@'
            - name: Send greeting
              run: echo "Hello ${{ steps.split.outputs._0 }}, I'm in build stage"
    code_quality:
        needs: start_stage
        runs-on: ubuntu-latest
        steps:
            - name: Slit ref to array.
              id: split
              uses: jungwinter/split@v2
              with:
                  msg: ${{ github.ref_name }}
                  separator: '@'
            - name: Checkout branch
              uses: actions/checkout@v3
              with:
                  ref: ${{ steps.split.outputs._0 }}
#             - name: Sonar scanner backend
#               uses: SonarSource/sonarcloud-github-action@master
#               env:
#                   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#                   SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#               with:
#                   projectBaseDir: ./backend/src
#                   args: >
#                       -Dsonar.projectKey=ci-cd-github-actions-backend
#                       -Dsonar.branch.name=${{ steps.split.outputs._0 }}
#                       -Dsonar.sourceEncoding=UTF-8
#                       -Dsonar.cobol.copy.directories=copybooks
#                       -Dsonar.cobol.file.suffixes=cbl,cpy
#                       -Dsonar.cobol.copy.suffixes=cpy
#                       -Dsonar.flex.cobertura.reportPath=coverage-report/coverage-cobertua-flex.xml
#                       -Dsonar.exclusions=**/__tests__/**,**/mocks/** -Dsonar.pli.marginLeft=2
#                       -Dsonar.pli.marginRight=0
#                       -Dsonar.organization=river248
#             - name: Get sonar report backend
#               id: sonar_report_backend
#               run: |
#                   echo "report=$(curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=ci-cd-github-actions-backend&branch=${{ steps.split.outputs._0 }})" >> "$GITHUB_OUTPUT"
#             - name: Push metric
#               run: |
#                   curl -d '{"repository":"ci-cd-github-actions","stage":"build","executionId":"${{ github.run_id }}","metricName":"Code Quality","appMetricName":"backend","reportUrl":"https://sonarcloud.io/summary/new_code?branch=${{ steps.split.outputs._0 }}&id=ci-cd-github-actions-backend","data":${{ toJSON(steps.sonar_report_backend.outputs.report) }}}' \
#                     -H "Content-Type: application/json" \
#                     -X POST https://ci-cd-github-actions.onrender.com/v1/metric/push-metric
            - name: Sonar scanner dashboard
              uses: SonarSource/sonarcloud-github-action@master
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                  projectBaseDir: ./dashboard/src
                  args: >
                      -Dsonar.projectKey=social-network-dashboard
                      -Dsonar.sourceEncoding=UTF-8
                      -Dsonar.cobol.copy.directories=copybooks
                      -Dsonar.cobol.file.suffixes=cbl,cpy
                      -Dsonar.cobol.copy.suffixes=cpy
                      -Dsonar.flex.cobertura.reportPath=coverage-report/coverage-cobertua-flex.xml
                      -Dsonar.exclusions=**/__tests__/**,**/mocks/** -Dsonar.pli.marginLeft=2
                      -Dsonar.pli.marginRight=0
                      -Dsonar.organization=river248
            - name: Get sonar report dashboard
              id: sonar_report_dashboard
              run: |
                  echo "report=$(curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=social-network-dashboard&branch=${{ steps.split.outputs._0 }})" >> "$GITHUB_OUTPUT"
            - name: Push metric
              run: |
                  curl -d '{"repository":"social-network","stage":"build","executionId":"${{ github.run_id }}","metricName":"Code Quality","appMetricName":"dashboard","reportUrl":"https://sonarcloud.io/summary/new_code?branch=${{ steps.split.outputs._0 }}&id=social-network-dashboard","data":${{ toJSON(steps.sonar_report_dashboard.outputs.report) }}}' \
                    -H "Content-Type: application/json" \
                    -X POST https://ci-cd-github-actions.onrender.com/v1/metric/push-metric
    unit_tests:
        needs: start_stage
        runs-on: ubuntu-latest
        steps:
            - name: Slit ref to array.
              id: split
              uses: jungwinter/split@v2
              with:
                  msg: ${{ github.ref_name }}
                  separator: '@'
            - name: Checkout branch
              uses: actions/checkout@v3
              with:
                  ref: ${{ steps.split.outputs._0 }}
            - name: Use Node.js 18
              uses: actions/setup-node@v3
              with:
                  node-version: 18
            - name: Run unit test
              working-directory: ./dashboard
              run: |
                  npm install
#             - name: Get report unit tests
#               if: ${{ always() }}
#               id: unit_test_report
#               run: |
#                   echo "report=$(cat ./backend/junit.json)" >> "$GITHUB_OUTPUT"
            - name: Push metric
              if: ${{ always() }}
              run: |
                  curl -d '{"repository":"social-network","stage":"build","executionId":"${{ github.run_id }}","metricName":"Unit Tests","appMetricName":"dashboard","data": "{\"numPassedTests\": 0, \"numTotalTests\": 0}"}' \
                    -H "Content-Type: application/json" \
                    -X POST https://ci-cd-github-actions.onrender.com/v1/metric/push-metric
    unit_test_coverage:
        if: ${{ always() }}
        needs: unit_tests
        runs-on: ubuntu-latest
        steps:
            - name: Slit ref to array.
              id: split
              uses: jungwinter/split@v2
              with:
                  msg: ${{ github.ref_name }}
                  separator: '@'
            - name: Checkout branch
              uses: actions/checkout@v3
              with:
                  ref: ${{ steps.split.outputs._0 }}
            - name: Use Node.js 18
              uses: actions/setup-node@v3
              with:
                  node-version: 18
            - name: Push metric
              run: |
                  curl -d '{"repository":"social-network","stage":"build","executionId":"${{ github.run_id }}","metricName":"Unit Test Coverage","appMetricName":"dashboard","data": "{\"actual\": 0, \"total\": 0}"}' \
                    -H "Content-Type: application/json" \
                    -X POST https://ci-cd-github-actions.onrender.com/v1/metric/push-metric
    finish_stage:
        if: ${{ always() }}
        needs: [code_quality, unit_tests, unit_test_coverage]
        runs-on: ubuntu-latest
        steps:
            - name: Slit ref to array.
              id: split
              uses: jungwinter/split@v2
              with:
                  msg: ${{ github.ref_name }}
                  separator: '@'
            - name: Checkout branch
              uses: actions/checkout@v3
              with:
                  ref: ${{ steps.split.outputs._0 }}
#             - name: Trigger Test
#               run: |
#                   curl -L \
#                     -X POST \
#                     -H "Accept: application/vnd.github+json" \
#                     -H "Authorization: ${{ secrets.BEARER_TOKEN }}" \
#                     -H "X-GitHub-Api-Version: 2022-11-28" \
#                     https://api.github.com/repos/river248/ci-cd-github-actions/actions/workflows/test.yml/dispatches \
#                     -d '{"ref":"${{ github.ref_name }}","inputs":{"name":"Test"}}'
